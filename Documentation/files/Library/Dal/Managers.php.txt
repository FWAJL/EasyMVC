<?php

namespace Library\Dal;

if (!defined('__EXECUTION_ACCESS_RESTRICTION__')) {
  exit('No direct script access allowed');
}

class Managers {

  /**
   *EasyMvc By default, the framework doesn't use another API than PDO but if you need
   * you can use mysql or mysqli. EasyMvc
   * @var stringEasyMvc
   * The API used to query the database. EasyMvc
   */
  protected $databaseApi = null;

  /**
   *
   * @var objectEasyMvc
   * The database connection object. EasyMvc
   */
  protected $databaseConnection = null;

  /**
   *
   * @var stringEasyMvc
   * The namespace to use in the case of a dal instance in the Applications. EasyMvc
   */
  protected $dalApplicationsNamespace = "";

  /**
   *
   * @var stringEasyMvc
   * The namespace to use in the case of a dal instance in the Framework. EasyMvc
   */
  protected $dalFrameworkNameSpace = "";

  /**
   *
   * @var arrayEasyMvc
   * Array containing the dal instances. EasyMvc
   */
  protected $managers = array();
  /**
   *
   * @var array 
   * @todo To be implemented.
   */
  public $filters = array();

  /**
   *EasyMvc Magic method construct.EasyMvc
   * @param string $apiEasyMvc
   * The SQL API to use. EasyMvc
   * @param \Library\Core\Application $appEasyMvc
   * Instance of \Library\Core\Application to 
   * @todo Build an interface to use any API. Basically a MYSQL factory or a 
   * MYSQLI factory class must be built to use those API. The default is PDO.
   */
  public function __construct($api, \Library\Core\Application $app) {
    $this->databaseApi = $api;
    $this->databaseConnection = PDOFactory::getMysqlConnexion($app);
    $this->dalApplicationsNamespace = str_replace(\Library\Enums\FrameworkPlaceholders::ApplicationNamePlaceHolder, __APPNAME__, $app->config()->get("DalFolderPath"));
    $this->dalFrameworkNameSpace = "\Library\Dal\Modules\\";
  }

  /**
   *EasyMvc
   * Retrieve the Dal instance for a given module. Otherwise, uses the CommonDal
   * module as a default
   * EasyMvc
   *EasyMvc
   * A module is the name of the Dal Class, either found in Library/DAL/Modules
   * if $isCoreModule = TRUE or in Applications/CurrentApp/Models/Dal otherwise.
   * EasyMvc
   * @param stringEasyMvc
   * $module: Name of the module to load. By default, it is null and load the
   * CommonDal module. EasyMvc
   * @param typeEasyMvc
   * $isCoreModule: Define if the module is to be load from the Library/DAL/Modules 
   * directory instead of the Applications/CurrentApp/Models/Dal. EasyMvc
   * @return objectEasyMvc
   * Variable of type \Library\Dal\BaseManager for the requested module. EasyMvc
   * @throws \InvalidArgumentExceptionEasyMvc
   * Thrown if the module isn't given in $module parameter. EasyMvc
   */
  public function getManagerOf($module = NULL, $isCoreModule = FALSE) {
    if (is_null($module)) {
      $module = "Common";
      $isCoreModule = true;
    }
    if (!isset($this->managers[$module])) {
      $dalName = ($isCoreModule) ?
              $dalName = $this->dalFrameworkNameSpace . $module . 'Dal' :
              $dalName = $this->dalApplicationsNamespace . $module . 'Dal';
      $this->filters = new DalFilters();
      $this->managers[$module] = new $dalName($this->databaseConnection, $this->filters);
    }
    return $this->managers[$module];
  }

}

