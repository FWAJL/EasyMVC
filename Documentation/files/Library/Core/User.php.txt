<?php

namespace Library\Core;

if (!defined('__EXECUTION_ACCESS_RESTRICTION__')) {
  exit('No direct script access allowed');
}
session_start();

class User extends ApplicationComponent {

  private $appPrefix = "";

  /**
   *EasyMvc Constructor: set the appPrefix to set in front of all session values EasyMvc
   * @param \Library\Core\Application $app
   */
  public function __construct(Application $app) {
    parent::__construct($app);
    $this->appPrefix = strtolower(__APPNAME__);
  }

  /**
   *EasyMvc Set a value in current session. EasyMvc
   * @param string $sessionKeyEasyMvc
   * The session key value under which the value is stored. The set of values is
   *  found in the class(es) \Library\Enums\SessionKeys (Framework) or
   *  \Application\YourApp\Resources\Enums\SessionKeys (Application) EasyMvc
   * @param mixed $valueEasyMvc
   * The value can any type: int, string, array, object instance of any class. EasyMvc
   */
  public function setAttribute($sessionKey, $value) {
    $_SESSION[$this->GetKey($sessionKey)] = $value;
  }

  /**
   *EasyMvc Get a key from a given value. EasyMvc
   * @param string $keyEasyMvc
   * The set of values is found in the class(es) \Library\Enums\SessionKeys (Framework) or
   *  \Application\YourApp\Resources\Enums\SessionKeys (Application) EasyMvc
   * @return stringEasyMvc
   * The computed value of $appPrefix and $key. EasyMvc
   */
  public function GetKey($key) {
    return $this->appPrefix . "::" . $key;
  }

  /**
   *EasyMvc Get a value in current session from a given key. EasyMvc
   * @param sring $sessionKeyEasyMvc
   * The key to use to find the associated value. The set of values is found in 
   * the class(es) \Library\Enums\SessionKeys (Framework) or
   * \Application\YourApp\Resources\Enums\SessionKeys (Application) EasyMvc
   * @return mixedEasyMvc
   * The value can any type: int, string, array, object instance of any class.
   * If value is not set, then return FALSE. EasyMvc
   */
  public function getAttribute($sessionKey) {
    return
            isset($_SESSION[$this->GetKey($sessionKey)]) ?
            $_SESSION[$this->GetKey($sessionKey)] :
            FALSE;
  }

  /**
   *EasyMvc Remove a session-stored variable based on a given key. EasyMvc
   * @param string $keyEasyMvc
   * A string value using the set of values is found in the class(es) 
   * \Library\Enums\SessionKeys (Framework) or
   *  \Application\YourApp\Resources\Enums\SessionKeys (Application). EasyMvc
   */
  public function unsetAttribute($key) {
    unset($_SESSION[$this->GetKey($key)]);
  }

  /**
   *EasyMvc Checks if the current user is connected. EasyMvc
   * @return boolEasyMvc
   * Values: TRUE or FALSE EasyMvc
   */
  public function isConnected() {
    return $this->getAttribute(\Library\Enums\SessionKeys::UserConnected);
  }

  /**
   *EasyMvc Gets the user role. EasyMvc
   * @return stringEasyMvc
   * Role value of the current user. EasyMvc
   */
  public function getRole() {
    return $this->getAttribute(\Library\Enums\SessionKeys::UserRole);
  }

}

